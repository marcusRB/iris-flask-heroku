# This workflow will build and push a new container image to Amazon ECR,
# and then will deploy a new task definition to Amazon ECS, when there is a push to the "master" branch.
#
# To use this workflow, you will need to complete the following set-up steps:
#
# 1. Create an ECR repository to store your images.
#    For example: `aws ecr create-repository --repository-name my-ecr-repo --region us-east-2`.
#    Replace the value of the `ECR_REPOSITORY` environment variable in the workflow below with your repository's name.
#    Replace the value of the `AWS_REGION` environment variable in the workflow below with your repository's region.
#
#
# 4. Store an IAM user access key in GitHub Actions secrets named `AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY`.
#    See the documentation for each action used below for the recommended IAM policies for this IAM user,
#    and best practices on handling the access key credentials.

name: Deploy to Amazon ECS

on:
  push:
    branches: [ "master" ]

env:
  applicationfolder : src
  AWS_REGION: ${{ vars.AWS_REGION }}                   # set this to your preferred AWS region, e.g. us-west-1
  ECR_REPOSITORY: ${{ vars.AWS_ECR_REPOSITORY }}         # set this to your Amazon ECR repository name
  S3BUCKET: ${{ vars.S3_BUCKET }}
  AWS_ACCOUNT_ID: ${{vars.AWS_ACCOUNT_ID }}

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build a docker container and
        # push it to ECR so that it can
        docker build -t $ECR_REPOSITORY:latest -f config/Dockerfile .
        docker tag $ECR_REPOSITORY:latest $AWS_ACCOUNT_ID.dkr.ecr.us-east-1.amazonaws.com/$ECR_REPOSITORY:latest
        docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPOSITORY:latest
        echo "image=$ECR_REPOSITORY:latest" >> $GITHUB_OUTPUT
    
    # - name: Deploy to App Runner Image
    #   id: deploy-apprunner
    #   uses: awslabs/amazon-app-runner-deploy@main
    #   with:
    #     service: app-runner-git-deploy-service
    #     image: 215557216277.dkr.ecr.us-east-1.amazonaws.com/iris-webapp
    #     access-role-arn: ${{ secrets.AWS_ROLE_ARN }}
    #     region: ${{ vars.AWS_REGION }}
    #     cpu : 0.5
    #     memory : 1
    #     # Deprecated: wait-for-service-stability: true
    #     # The new way to control service stability timeout
    #     wait-for-service-stability-seconds: 1200
    #     port : 5000
    
    # - name: App Runner URL
    #   run: echo "App runner URL ${{ steps.deploy-apprunner.outputs.service-url }}"